스프링의 역사
-2002년 로드존슨 MVC
적식 등록 - 2004년 4월
2004년 03월 : 1.x 버전
2006년 10월 : 2.x 버전
2009년 12월 : 3.x 버전
2014년 04월 : 4.x 버전
2017년 09월 : 5.x 버전

자바의 버전이 높아지면 class 가 많아진다

2006년부터 SSH라는 용어를 사용
Spring Struts Hibernate

2013년 이후 스트러츠 2.3버전 기준으로 서비스 종료
(보안상의 문제 - 일본은 아직 사용중)

전자정부 프레임워크는 스프링 3.0을 기반으로 구축

초기에 스프링 서브 프로젝트로 화면 전환의 흐름을 관리하는 스프링 웹 플로가 있었고, 그 후로
인증/허가 처리를 관리하는 스프링 시큐리티등이 추가되었으며, 일괄 처리용 스프링 배치가 출시
되었음.
최근에는 애플리케이션 개발을 간단하게 해주는 스프링 부트가 주목을 받고있음

-----------------------------------------------------------------------------------------
스프링 설정 방법

1.0 ~ 3.0 버전
Spring Legacy Project (현업에서 가장 많이 사용)
- 기본페이지로 jsp를 사용

4.0 이후 버전
Spring Boot (최신기술 : 설정을 최소화)
-jsp 페이지가 아닌 기본 템플릿을 사용

---------------------------------------------------------------------------------------
웹의 역사

HTML(정적) -> CGI(ASP) -> Servlet, JSP -> EJB(Enterprise JavaBeans) -> Spring

현재에는 Ajax로 웹 브라우저에 풍부한 화면을 구현함
(Javascript의 비동기 통신(XML,HttpRequest)를 사용해 웹 브라우저의 화면 이동 없이
화면 일부를 변경하는 기술
-> 화면의 편리성을 향상
ex)Google Map 의 화면 이동이나 지도상에서 상점 정보를 표시하는것 등

----------------------------------------------------------------------------------------
Model 1
-웹 브라우저의 요청을 JSP가 담당
-JSP가 요청을 받고 해당 요청에 대한 처리를 위해 BEANS와 통신
-Beans가 처리 결과를 주면 그것을 클라이언트에 전달

-장점 : 구조가 간단, 개발 편리, 개발기간이 짧음
-단점 : 유지/보수가 어려움, 개발자와 디자이너의 소통이 많이 필요함

Model 2
-MVC (Model View Controller)방식
-요청을 컨트롤러(Servlet)에서 처리
-요청에 따른 처리를 위해 Beans와 통신
-응답할 JSP를 선택할 수 있음

-장점 : 컨트롤러와 뷰의 분리로 유지 보수가 편리, 개발자와 디자이너의 역할 분담
-단점 : 높은 수준의 이해도 필요, 설계에 많은 투자 필요, 개발기간이 김

----------------------------------------------------------------------------------------
규모가 작고 유지보수가 적으면 Model 1 방식 선택
규모가 크고 유지보수가 많으면 Model 2 방식 선택

-----------------------------------------------------------------------------------------
MVC
Model	: 데이터 생성, 저장, 처리
View	: 결과를 보여주고 입력받은 화면을 구성
Controller: 입력의 흐름 제어/ 요청을 Model에게, Model의 결과를 View에게 전달

-----------------------------------------------------------------------------------------
redirect 와 dispatcher의 차이점
redirect - 주소값이 변함
dispatcher - 주소값이 변하지 않음

-----------------------------------------------------------------------------------------
자바를 이용해 어플리 케이션을 개발할 때 메이븐과 들은 같은 빌드 도구를 사용
빌드 도구들의 주요 특징중 하나는 의존 모듈(jar)관리에 있음

ex) 메이븐 / 중앙 리파지터 라고 불리는 서버로 부터 필요한 jar 파일을 다운로드 받아 처리

-----------------------------------------------------------------------------------------
Spring 개발 환경 설정

Java 와 JSP 환경에서 개발자가 더 편리하게 프로젝트를 진행할 수 있도록 만들어 놓은 툴

- 스프링 개발 툴 / 기존의 이클립스에서 확장 프로그램을 설치

- InteliJ / 안드로이드 웹 개발에 주로 사용

-STS 전용 툴(Spring Tool Suite)

----------------------------------------------------------------------------------------
Spring 다운로드 & 설정

http://spring.io/tools

sts4 에서는 Spring Boot만 지원
Spring Legacy Project를 추가해야함
- Help -> Eclipse Marketplace -> Spring tools -> Spring tools 3
- window -> Preferences -> 제네럴, 웹 UTF-8로
- Help -> Install new Software 
	-> Work with = 2019-03 - https://download.eclipse.org/releases/2019-03
	-> java web 검색 -> 이클립스 디벨로퍼

http://mannaedu.com/bbs/board.php?bo_table=pds&wr_id=74
Sample 다운로드

http://mvnrepository.com

-----------------------------------------------------------------------------------------
pom.xml
src/main/webapp/WEB-INF/web.xml
src/main/webapp/WEB-INF/spring/root-context.xml
src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml
src/main/java/com.example.spring01/HomeController.java

-----------------------------------------------------------------------------------------
# 스프링에서 다음과 같이 자동으로 검색해서 객체 생성

@Controller	: 컨트롤러 빈(메인클래스)
@Repository	: DAO(DB관련 작업)빈
@Service	: 서비스(비지니스 관련 로직)빈
@Inject		: ,의존성 관계 주입

-----------------------------------------------------------------------------------------
스프링 구조

src/main/java		: 자바코드(Controller, Model, Service)
src/main/resources	: 자바코드에서 참조하는 리소스 파일들
			  (sqlMapconfig.xml, mybatis mapper 등)
src/test/java		: 테스트 관련 코드
src/main/webapp		: 웹서비스 루트 디렉토리
src/main/webapp/resource: js,css,image 관련 웹 리소스 파일들
src/main/webapp/WEB-INF/: 외부에서 파일 경로나 디렉토리를 보지 못하게 제한되어있음
src/main/webapp/WEB-INF/views : html문서, jsp 문서

-----------------------------------------------------------------------------------------
Controller와 view 실습
MainController 클래스 작성